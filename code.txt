let resData = {
        status : "",
        statuCode : 200 ,
        data : ""
    }   
    let sql = `SELECT * FROM tb_bank_detail`;
    pool.query(
        sql, 
        (err, result) => {

            if (err) {
                //console.log(err); 
                resData.status = "error"; 
                resData.statuCode = 200 ;
                resData.data = err ;
                res.status(resData.statuCode).json(resData)
            }
            else
            {    
                resData.status = "success"; 
                resData.statuCode = 201 ;
                resData.data = result.rows ;
                res.status(resData.statuCode).json(resData);
            }
        }
    );
    
getGasDetail = (req ,res ,next) =>{
    let data = req.query.x
    let resData = {
        status : "",
        statusCode : 200 ,
        data : ""
    }
    if(data == "" || data == null)
    {
        resData.status = "error";
        resData.statusCode = 200 ;
        resData.data = "not have parameter ( "+ checkParameter +" )";    
        res.status(200).json(resData);
    }   
    else {
        let sql = ``;
        pool.query(
            sql, 
            (err, result) => {

                if (err) {
                    //console.log(err); 
                    resData.status = "error"; 
                    resData.statusCode = 200 ;
                    resData.data = err ;
                    res.status(resData.statusCode).json(resData)
                }
                else
                {    
                    resData.status = "success"; 
                    resData.statusCode = 201 ;
                    resData.data = result.rows ;
                    res.status(resData.statusCode).json(resData);
                }
            }
        );
    }
    
};

 resData.status = "success";
resData.statusCode = 201 ;
resData.data = "insert complete";
res.status(201).json(resData);



    let dataBody = req.body ;
    let resData = {
        status : "",
        statusCode : 200 ,
        data : ""
    } ;
    if(checkParameter != "" ) 
    {
        //console.log(checkParameter)       
        resData.status = "error";
        resData.statusCode = 200 ;
        resData.data = "not have parameter ( "+ checkParameter +" )";    
        res.status(200).json(resData);
    }
    else{   
        let sql = `INSERT INTO "public"."tb_bank_driver"("driver_id", "bank_id",
                "bank_name", "bank_account", "modifyDate") 
                    VALUES (${dataBank.driver_id}, ${dataBank.bank_id}, '${dataBank.name_account}',
                     '${dataBank.bank_account}', '${dataBank.modidyDate}') 
                    RETURNING *`;
        pool.query(
            sql, 
            (err, result) => {

                if (err) {
                    //console.log(err); 
                    resData.status = "error"; 
                    resData.statusCode = 200 ;
                    resData.data = err ;
                    res.status(resData.statusCode).json(resData)
                }
                else
                {    
                    resData.status = "success";
                    resData.statusCode = 201 ;
                    resData.data = "insert complete";
                    res.status(201).json(resData);
                }
            }
        );
    }



    else{       
        let sql = `UPDATE "public"."tb_register_iot" SET "serialNumber" = '${dataIoT.serialNumber}', 
                    "modifyDate" = '2020-10-22 17:40:11',
                    "lat" = '${dataIoT.lat}', "lon" = '${dataIoT.lon}' WHERE "id" = ${dataIoT.id}`;
        pool.query(
            sql, 
            (err, result) => {
    
                if (err) {
                    //console.log(err);  
                    resData.status = "error";
                    resData.statusCode = 200 ;
                    resData.data = "error update tb_register_iot : " + err;    
                    res.status(200).json(resData);
                }
                else
                {
                    resData.status = "success";
                    resData.statusCode = 201 ;
                    resData.data = "update complete";    
                    res.status(201).json(resData);
                }
            }
        );
    }



    let dataBank = new BankDriver();
    let dataBody = req.body ;
    //let dd = await x(dataBody.driver_id)
    //console.log(dd)
    dataBank.driver_id = dataBody.driver_id ;
    dataBank.bank_id = dataBody.bank_id ;
    dataBank.name_account = dataBody.name_account ;
    dataBank.bank_account = dataBody.bank_account;
    dataBank.modidyDate =  moment(new Date()).format('YYYY-MM-DD H:mm:ss');
    let checkParameter = await funCheckParameterWithOutId(dataBank);
    let resData = {
        status : "",
        statusCode : 200 ,
        data : ""
    } ;
    if(checkParameter != "" ) 
    {
        //console.log(checkParameter)       
        resData.status = "error";
        resData.statusCode = 200 ;
        resData.data = "not have parameter ( "+ checkParameter +" )";    
        res.status(200).json(resData);
    }
    else
    {
        let sql = ``;
        pool.query(
            sql, 
            (err, result) => {
    
                if (err) {
                    //console.log(err);  
                    resData.status = "error";
                    resData.statusCode = 200 ;
                    resData.data = "error update tb_register_iot : " + err;    
                    res.status(200).json(resData);
                }
                else
                {
                    resData.status = "success";
                    resData.statusCode = 201 ;
                    resData.data = "update complete";    
                    res.status(201).json(resData);
                }
            }
        );
    }


    let data = req.body.driverBank_id;   
    let resData = {
        status : "",
        statusCode : 200 ,
        data : ""
    } ;
    if(data == "" || data == null) 
    {
        //console.log(checkParameter)       
        resData.status = "error";
        resData.statusCode = 200 ;
        resData.data = "not have parameter ( driverBank_id )";    
        res.status(200).json(resData);
    }



    cancalOrderUser = (req,res,next) =>{
    //UPDATE "public"."tb_order" SET "status" = '1' WHERE "id" = 2
    let data = req.body.order_id ;
    let resData = {
        status : "",
        statusCode : 200 ,
        data : ""
    }
    if(data == "" || data == null)
    {
        resData.status = "error";
        resData.statusCode = 200 ;
        resData.data = "not have parameter ( order_id )";    
        res.status(200).json(resData);
    }   
    else 
    {
 
    }
}




-- SELECT tb_order.order_number as order_number, sum((tb_order_detail.quality * tb_gas_detail.price)) as price_all,
-- tb_order."modifyDate" as modify_date , tb_order_status."name" as status_order
-- FROM tb_order
-- INNER JOIN tb_payment_channel ON tb_payment_channel."id" = tb_order.payment_id
-- INNER JOIN tb_order_status ON tb_order_status."id" = tb_order.status
-- INNER JOIN tb_order_detail ON tb_order_detail.order_id = tb_order."id"
-- INNER JOIN tb_gas_detail ON tb_gas_detail."id" = tb_order_detail.gas_id
-- WHERE tb_order.user_id = 15  
-- GROUP BY order_number , modify_date , status_order 
-- ORDER BY order_number

SELECT  tb_order.order_number as order_number,tb_gas_detail."name" as gas_type ,tb_order_detail.quality ,
                    (tb_gas_detail.price) as price                  
                    FROM tb_order
                    INNER JOIN tb_order_detail ON tb_order_detail.order_id = tb_order."id"
                    INNER JOIN tb_gas_detail ON tb_gas_detail."id" = tb_order_detail.gas_id
                    WHERE tb_order.user_id = 15 ORDER BY order_number


                    UPDATE "public"."tb_order" SET "rider_id" = 4 WHERE "id" = 1
                    UPDATE "public"."tb_order" SET "receiveDate" = '2020-11-10 14:13:20' WHERE "id" = 1

                    INSERT INTO "public"."tb_machine_gas"("owner", "phone", "lat", "lon", "status") VALUES ('chill talk', '0812318897', '10.22222', '10.11111', 1) RETURNING *






                                                // หา diver ที่อยู่ใกล้
                            //->หา lat lon address_user
                            //dataOrder.address_id
                            //position1 = "13.7510896,100.5836019" ;
                            //position2 =  "13.7510896,100.5858107" ;
                            let origin ;        // ที่อยู่ rider
                            let destination ; // ที่จัดส่ง
                            //SELECT id as address_id , latitude , longitude FROM tb_address_user WHERE tb_address_user.id = 17 

                            //SELECT id as driver_id , lat , lon FROM tb_rider WHERE tb_rider."statusWork" = 1
                            sql = `SELECT id as address_id , latitude as lat, longitude as lon
                            FROM tb_address_user WHERE tb_address_user.id = ${dataOrder.address_id}`;
                            pool.query(
                                sql, 
                                async (err, result) => {

                                    if (err) {
                                        //console.log(err); 
                                        resData.status = "error"; 
                                        resData.statusCode = 200 ;
                                        resData.data = err + "error select tb_address_user" ;
                                        res.status(resData.statusCode).json(resData)
                                    }
                                    else
                                    {    
                                        if(result.rows)
                                        {                                                                                     
                                            destination = await {
                                                ADDRESS_id : result.rows[0].address_id ,
                                                position : result.rows[0].lat+","+result.rows[0].lon
                                            }
                                            console.log(destination)
                                            console.log("destination")

                                            sql = `SELECT id as driver_id , lat , lon FROM tb_rider WHERE tb_rider."statusWork" = 1`;
                                            pool.query(
                                                sql, 
                                                async (err, result) => {

                                                    if (err) {
                                                        //console.log(err); 
                                                        resData.status = "error"; 
                                                        resData.statusCode = 200 ;
                                                        resData.data = err + "error select get tb_rider(lat,lon) ALL " ;
                                                        res.status(resData.statusCode).json(resData)
                                                    }
                                                    else
                                                    {    
                                                        resData.status = "success"; 
                                                        resData.statusCode = 201 ;
                                                        // console.log(result.rows)
                                                        result.rows.forEach(element => {
                                                            console.log(element)
                                                        });
                                                        //  = {
                                                        //     driver_id : result.rows[0].address_id ,
                                                        //     position : result.rows[0].lat+","+result.rows[0].lon
                                                        // }                                                                                
                                                    }
                                                }
                                            );
                                        }
                                        else
                                        {
                                            resData.status = "error"; 
                                            resData.statusCode = 200 ;
                                            resData.data = err + "error select tb_address_user" ;
                                            res.status(resData.statusCode).json(resData)
                                        }                                                                                                                                                        
                                    }
                                }
                            );

                            
                            // //  หา lat , lon ที่ใกล้
                            // if(origin && destination)
                            // {
                            //     let positionNear = await findDistanceMatrix(origin)                                                                        
                            // }
                            // else {
                            //     resData.status = "error"; 
                            //     resData.statusCode = 200 ;
                            //     resData.data = err + "error Unable to send an order to the driver." ;
                            //     res.status(resData.statusCode).json(resData)
                            // }